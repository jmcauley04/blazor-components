@if (IsOpen)
{
    <div @onclick="Cancel" class="modal show" tabindex="-1" aria-modal="true" role="dialog" style="display: block; background-color: rgba(0,0,0,.4);">
        <div @onclick:stopPropagation="true" class="modal-dialog modal-dialog-scrollable @maxWidthClass">
            <div class="modal-content">
                @if(ModalHeader != null)
                {
                    <div class="modal-header align-items-center">
                        @ModalHeader            
                        <BlazyButton OnClick="Cancel" Disabled="@working">
                            <span aria-hidden="true">&times;</span>
                        </BlazyButton>
                    </div>   
                }
            <div class="modal-body">
                @if(ModalBody != null)
                {
                    @ModalBody                       
                }
            </div>
            <div class="modal-footer">
                @if(ModalFooter == null)
                {
                    <BlazyButton Style="BlazyButton.ButtonStyle.Secondary" OnClick="Cancel" Disabled="@working">Close</BlazyButton>
                    @if(OnSave.HasDelegate)
                    {
                        <BlazyButton Style="BlazyButton.ButtonStyle.Primary" OnClick="Save" Disabled="@(working || !CanSave)">Save changes</BlazyButton>                         
                    }
                }
                else
                {
                    @ModalFooter
                }
            </div>
        </div>
      </div>
    </div> 
}

@code {
    bool working;

    public enum Width {
        Small = 300, 
        Default = 500, 
        Large = 800,
        ExtraLarge = 1140
    }

    [Parameter]
    public Width MaxWidth { get; set; } = Width.Default;

    string maxWidthClass => MaxWidth switch
    {
        Width.Small => "modal-sm",
        Width.Default => "",
        Width.Large => "modal-lg",
        Width.ExtraLarge => "modal-xl",
        _ => ""
    };

    [Parameter]
    public EventCallback OnSave { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public RenderFragment? ModalHeader { get; set; }

    [Parameter]
    public RenderFragment? ModalBody { get; set; }

    [Parameter]
    public RenderFragment? ModalFooter { get; set; }

    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public bool CanSave { get; set; } = true;


    void Open()
    {
        IsOpenChanged.InvokeAsync(true);
    }

    async Task Cancel()
    {
        if (working)
            return;

        try
        {            
            working = true;
            await OnCancel.InvokeAsync();
            await IsOpenChanged.InvokeAsync(false);
        }
        finally
        {
            working = false;
        }
    }

    async Task Save()
    {        
        if (working)
            return;

        try
        {            
            working = true;
            await OnSave.InvokeAsync();
            await IsOpenChanged.InvokeAsync(false);
        }
        finally
        {
            working = false;
        }
    }
}


