@inherits LayoutComponentBase
@using Blazy.Layouts
@using System.ComponentModel
@using Blazy.Components.Abstractions

@switch (layout){
    case LayoutStyle.Linear:
        {
            <BlazyLinearLayout>
                <TopRowFragment>
                    @TopRowFragment()
                </TopRowFragment>
                <NavFragment>        
                    <div class="top-nav-wrapper">
                        <BlazyTopNav Links="@Links" />
                    </div>
                </NavFragment>
                <BodyFragment>
                    @Body
                </BodyFragment>
                <FooterFragment>                    
                    @FooterFragment()
                </FooterFragment>
            </BlazyLinearLayout>
        }
        break;
    case LayoutStyle.SideNav:
        {
            <BlazySideNavLayout>
                <TopRowFragment>
                    @TopRowFragment()
                </TopRowFragment>
                <NavFragment>        
                    <div class="side-nav-wrapper">
                        <BlazySideNav Links="@Links" HeaderText="Blazy Components" />
                    </div>
                </NavFragment>
                <BodyFragment>
                    @Body
                </BodyFragment>
                <FooterFragment>
                    @FooterFragment()
                </FooterFragment>
            </BlazySideNavLayout>            
        }
        break;
}

@code {
    RenderFragment TopRowFragment() {
        return __builder =>
        {        
            <div class="top-row">
                <Blazy.Fragments.BlazyLogo />
                <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>
        };
    }
    RenderFragment FooterFragment() {
        return __builder =>
        {
            <footer class="footer">
                <div>
                    <h5>Michael Cauley</h5>
                    <ul>
                        <li>Software Engineer</li>
                        <li><a href="mailto:jmcauley04@gmail.com">jmcauley04@gmail.com</a></li>
                        <li><a href="https://github.com/jmcauley04">GitHub</a></li>
                        <li><a href="https://github.com/jmcauley04/blazy">Blazy Repo</a></li>
                    </ul>
                </div>
                <div>                    
                    <h5>Project Summary</h5>
                    <p>
                        @footerText
                    </p>
                </div>
            </footer>
        };
    }

    string footerText = @"Blazy is an open-source project of passion. The intent of the project is to create high-quality, user-friendly components that 
help users transition from older front-ends to Blazor.  Blazor is a massive improvement to the .NET stack allowing C# developers to design and create in the web space 
with almost as much capability as JavaScript and in the event that C# alone is not enough, it allows the developer to surgically utilize JavaScript as needed.  Blazor
client is built on the rock-solid browser technology, Web Assembly, and runs entirely and natively in the browser.  Blazor server continues to provide a means for 
creating frontends computed on a server and delivered to a client using a continuous connection over a websocket via SignalR.  These two technologies allow developers to
create an ASP.NET hosted API and deliver to the frontend using precisely the same shared models for both use-cases.";

    protected override void OnInitialized()
    {
        Links = new BlazyNavMenu.BlazyNavLink[]
            {
            new () {Text = "HOME", Href = ""},
            new () {Text = "LAYOUTS", Sublinks = new BlazyNavMenu.BlazyNavLink[]
                {
                    new () {Text = "LINEAR", OnClick = () => SetLayout(LayoutStyle.Linear) },
                    new () {Text = "SIDE NAV", OnClick = () => SetLayout(LayoutStyle.SideNav)},
                }
            },
            new () {Text = "BUTTONS", Href = "buttons"},
            new () {Text = "MODALS", Href = "modals"},
            new () {Text = "DATAGRID", Href = "datagrid"},
            new () {Text = "STEPPER", Href = "stepper"},
            new () {Text = "CODEBOX", Href = "codebox"},
            new () {Text = "NAVMENU", Href = "navmenu"},
        };

        base.OnInitialized();
    }

    BlazyNavMenu.BlazyNavLink[] Links = new BlazyNavMenu.BlazyNavLink[0];

    public enum LayoutStyle
    {
        [Description("BlazySideNavLayout")] SideNav,
        [Description("BlazyLinearLayout")] Linear
    }

    LayoutStyle layout = LayoutStyle.Linear;

    void SetLayout(LayoutStyle style)
    {
        layout = style;
        StateHasChanged();
    }
}