@page "/codebox"

<h3>Codebox</h3>

<BlazyCodeBox Code="@_code" />

@code {
    string _code = @"[Parameter]
public string Code { get; set; } = string.Empty;

string ColorizeTextKinds(string text)
{
    ColoredSpans = new();
    var root = CSharpSyntaxTree.ParseText(Code).GetRoot();
    var nodes = root.DescendantNodesAndTokens().ToList();
    int offset = 0;

    foreach(var node in nodes)
    {            
        var span = node.Span;
        if (ColoredSpans.Any(x => x.OverlapsWith(span)))
            continue;

        var kind = node.Kind();
        var parentKind = node.Parent!.Kind();

        int origLength = span.Length;
        var styledText = string.Empty;

        if (kind.ToString().Contains(""Keyword""))
        {
            styledText = Styled(text.Substring(span.Start + offset, span.End - span.Start), Colors[SyntaxColor.Pink]);
        }
        else if (kind == SyntaxKind.Attribute)
            styledText = Styled(text.Substring(span.Start + offset, span.End - span.Start), Colors[SyntaxColor.Green]);
        else if (kind == SyntaxKind.StringLiteralExpression)
            styledText = Styled(text.Substring(span.Start + offset, span.End - span.Start), Colors[SyntaxColor.Brown]);
        else
        {                
            switch (node.Kind())
            {
                case SyntaxKind.IdentifierToken:
                    if (nextKind == SyntaxKind.ArgumentList)
                        styledText = Styled(text.Substring(span.Start + offset, span.End - span.Start), Colors[SyntaxColor.Yellow]);
                    else if (nextKind == SyntaxKind.DotToken)
                        styledText = Styled(text.Substring(span.Start + offset, span.End - span.Start), Colors[SyntaxColor.Green]);
                    else if (prevKind != SyntaxKind.DotToken)
                        styledText = Styled(text.Substring(span.Start + offset, span.End - span.Start), Colors[SyntaxColor.LightBlue]);
                    else
                        continue;
                    break;
                case SyntaxKind.IdentifierName:
                    if (parentKind.ToString().Contains(""Expression""))
                        continue;
                    else                        
                        styledText = Styled(text.Substring(span.Start + offset, span.End - span.Start), Colors[SyntaxColor.Blue]);                        
                    break;
                default:
                    continue;
            }
        }

        ColoredSpans.Add(span);
        text = text.Substring(0, span.Start + offset) + styledText + text.Substring(span.End + offset);
        offset += styledText.Length - origLength;
    }

    return text;
}
";
}
