@inherits LayoutComponentBase
@using Blazy.Layouts
@using System.ComponentModel
@using Blazy.Components.Abstractions

@switch (layout){
    case LayoutStyle.Linear:
        {
            <BlazyLinearLayout>
                <TopRowFragment>
                    @TopRowFragment()
                </TopRowFragment>
                <NavFragment>        
                    <div class="top-nav-wrapper">
                        <BlazyTopNav Links="@Links" />
                    </div>
                </NavFragment>
                <BodyFragment>
                    @Body
                </BodyFragment>
                <FooterFragment>                    
                    @FooterFragment()
                </FooterFragment>
            </BlazyLinearLayout>
        }
        break;
    case LayoutStyle.SideNav:
        {
            <BlazySideNavLayout>
                <TopRowFragment>
                    @TopRowFragment()
                </TopRowFragment>
                <NavFragment>        
                    <div class="side-nav-wrapper">
                        <BlazySideNav Links="@Links" HeaderText="Blazy Components" />
                    </div>
                </NavFragment>
                <BodyFragment>
                    @Body
                </BodyFragment>
                <FooterFragment>
                    @FooterFragment()
                </FooterFragment>
            </BlazySideNavLayout>            
        }
        break;
}

@code {
    RenderFragment TopRowFragment() {
        return __builder =>
        {        
            <div class="top-row">
                <span>bla<Blazy.Fragments.BlazyLogo />y</span>
                <a href="https://github.com/jmcauley04/blazy" target="_blank">Github</a>
        </div>
        };
    }
    RenderFragment FooterFragment() {
        return __builder =>
        {
            <footer class="footer">
                <div>
                    <h5>Michael Cauley</h5>
                    <ul>
                        <li>Software Engineer</li>
                        <li><a href="mailto:jmcauley04@gmail.com">jmcauley04@gmail.com</a></li>
                        <li><a href="https://github.com/jmcauley04">Github</a></li>
                        <li><a href="https://github.com/jmcauley04/blazy">Blazy Repo</a></li>
                    </ul>
                </div>
                <div>                    
                    <h5>Project Summary</h5>
                    <p>
                        @footerText
                    </p>
                </div>
        </footer>
        };
    }

    string footerText = @"Blazy is an open-source project of passion. The intent of the project is to create high-quality, user-friendly components that 
help C# developers transition from non-C# front-ends to Blazor.  Blazor is a massive improvement to the .NET stack allowing C# developers to design and create in the web space 
with almost as much capability as JavaScript and in the event that C# alone is not enough, it allows the developer to surgically utilize JavaScript as needed.  Blazor
client is built on the rock-solid browser technology, Web Assembly, and runs entirely and natively in the browser while Blazor server continues to provide a means for 
creating frontends computed on a server and delivered to a client over a continuous connection established by websockets using SignalR.  These two technologies allow developers to
create an ASP.NET hosted API and deliver to the frontend using precisely the same shared models for both use-cases.";

    protected override void OnInitialized()
    {
        Links = new BlazyNavMenu.BlazyNavLink[]
            {
            new () {Text = "HOME", Href = "" },
            new () {Text = "LAYOUTS", Sublinks = new BlazyNavMenu.BlazyNavLink[]
                {
                    new () {Text = "LINEAR", OnClick = () => SetLayout(LayoutStyle.Linear) },
                    new () {Text = "SIDE NAV", OnClick = () => SetLayout(LayoutStyle.SideNav)},
                }
            },
            new () {Text = "BASIC COMPONENTS", Sublinks = new BlazyNavMenu.BlazyNavLink[]
                {
                    new () {Text = "ACCORDION", Href = "accordions"},
                    new () {Text = "ALERTS", Href = "alerts"},
                    new () {Text = "BADGES", Href = "badges"},
                    new () {Text = "BUTTONS", Href = "buttons"},
                    new () {Text = "CODEBOX", Href = "codebox"},     
                    new () {Text = "FORM CONTROLS", Href = "form-controls"},     
                    new () {Text = "MODALS", Href = "modals"},    
                    new () {Text = "PROGRESS BARS", Href = "progressbars"},   
                    new () {Text = "SPINNERS", Href = "spinners"},  
                }
            },
            new () {Text = "ADVANCED COMPONENTS", Sublinks = new BlazyNavMenu.BlazyNavLink[]
                {
                    new () {Text = "DATAGRID", Href = "datagrid"},
                    new () {Text = "STEPPER", Href = "stepper"},
                    new () {Text = "NAVMENUS", Href = "navmenus"},
                    new () {Text = "TOAST", Href = "toast"},
                    new () {Text = "ITEMS LIST", Href = "items-list"},
                }
            },
            new () {Text="ICONS", Href="icons" },
        };

        base.OnInitialized();
    }

    BlazyNavMenu.BlazyNavLink[] Links = new BlazyNavMenu.BlazyNavLink[0];

    public enum LayoutStyle
    {
        [Description("BlazySideNavLayout")] SideNav,
        [Description("BlazyLinearLayout")] Linear
    }

    LayoutStyle layout = LayoutStyle.Linear;

    void SetLayout(LayoutStyle style)
    {
        layout = style;
        StateHasChanged();
    }
}