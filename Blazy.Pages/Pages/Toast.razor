@page "/toast"
<PageTitle>Toast</PageTitle>
<h3>Toast</h3>



<h5>Code</h5>
@{
    string _codeapprazor = @"<Found Context=""routeData"">
    <BlazyToast CascadeValue=""true"">
        <RouteView RouteData=""@routeData"" DefaultLayout=""@typeof(MainLayout)"" />
        <FocusOnNavigate RouteData=""@routeData"" Selector=""h1"" />
    </BlazyToast>
</Found>";
}
<BlazyCodeBox Title="App.razor" Code="@_codeapprazor" />

@{
    string _codecomponent = @"[CascadingParameter]
public BlazyToast? BlazyToast { get; set; }

void ShowToast()
{
    if (BlazyToast != null)
        BlazyToast.AddMessage(toastMessage, toastTitle, themeColor: selection);
}";
}
<div class="my-5"></div>
<BlazyCodeBox Title="Any component" Code="@_codecomponent" />

<h5>Try it</h5>

<div class="try-it-form">
    <BlazySelect TItem="Blazy.Enums.ThemeColor"
        Display="GetDisplayText"
        Label="Theme"
        Options="Enum.GetValues<Blazy.Enums.ThemeColor>()"
        @bind-SelectedOption="selection">
    </BlazySelect>

    <label>
        <span>
            <small>Toast Dismiss Timer (0 = No auto dismiss):</small>
            <code>[@toastDelay seconds]</code>
        </span>
        <input type="range" @bind-value="toastDelay" min="0" max="10" />
    </label>

    <div class="ex-toast">
        <div>
            <BlazyInputText @bind-Value="toastTitle" Label="Title" />
        </div>
        <div>
            <BlazyInputText @bind-Value="toastMessage" Label="Message" />
        </div>    
    </div>
    <BlazyButton OnClick="ShowToast" ThemeColor="Blazy.Enums.ThemeColor.Secondary">Show Toast</BlazyButton>
</div>
@code {
    [CascadingParameter]
    public BlazyToast? BlazyToast { get; set; }

    string GetDisplayText(Blazy.Enums.ThemeColor color) => color.ToString();

    string toastTitle = "Title Message";
    string toastMessage = string.Empty;
    int toastDelay = 3;
    Blazy.Enums.ThemeColor selection = Blazy.Enums.ThemeColor.Secondary;

    void ShowToast()
    {
        if (BlazyToast != null)
            BlazyToast.AddMessage(toastMessage, toastTitle, themeColor: selection, delayMilliseconds: toastDelay * 1000);
    }
}
