@using Blazy.Utility
@using Blazy.Utility.Math
@page "/charts"
<PageTitle>Blazy Charts</PageTitle>
<h3>Blazy Charts</h3>

<div class="d-grid justify-content-stretch">

    @if(Data != null)
    {
        <BlazyChart 
            @ref="blazyChart"
            Data="Data"
            Start="@ChartStart"
            Size="@ChartSize"
            ChartTitle="Blazy Line Chart Title"
            XAxisTitle="x-axis title"
            YAxisTitle="y-axis title"
            ShowLabels="ShowValueLabels" />    
    }
    
    <div class="d-flex" style="justify-self: center; gap: 2em; align-items: center;">        
        <BlazyCheckbox Label="Show Value Labels" @bind-Value="ShowValueLabels" />
        <label>
            Points (@points):
            <input type="range" @bind-value="points" min="20" max="10000" />
        </label>
        <BlazyButton ThemeColor="ThemeColor.Primary" OnClick="RecalculatePoints">Recalculate Points</BlazyButton>
    </div>
</div>

@code {
    Point[]? Data;

    Point ChartStart = new(-10, -50);
    Point ChartSize = new(400, 150);
    bool ShowValueLabels;
    int points = 250;

    BlazyChart? blazyChart;

    protected override async Task OnInitializedAsync()
    {
        await RecalculatePoints();
    }

    async Task RecalculatePoints()
    {        
        List<Point> data = new();
        var x = ChartStart.X;
        var y = ChartStart.Y;
        data.Add(new(x, y));

        int i = 0;
        while(x < ChartSize.X + ChartStart.X)
        {
            x += ChartSize.X / (points - 1);
            y = Math.Max(ChartStart.Y, Math.Min(y + Random.Shared.Next(-14, 16), ChartSize.Y + ChartStart.Y));
            data.Add(new(x, y));
            i++;
        }
        Data = data.ToArray();

        if (blazyChart is not null)
            await blazyChart.Redraw();
    }
}
