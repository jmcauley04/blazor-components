@page "/form-controls"
<PageTitle>Form Controls</PageTitle>
<h3>Form Controls</h3>

<h4>BlazySelect</h4>
<p>
    The OptionTemplate allows full control over how listed options are rendered.  If custom rendering is not required, the
    default rendering may be sufficient.
</p>
<div class="d-grid d-grid-2-col">
    <div>
        <h5>Code - With default rendering</h5>

        @{
            string _codeSelect = @"<BlazySelect 
    TItem=""Blazy.Enums.ThemeColor""
    Label=""Theme""
    Options=""@Options""
    @bind-SelectedOption=""@selection""
    Display=""@GetDisplayText"" />

@code {
    Blazy.Enums.ThemeColor selection;

    string GetDisplayText(Blazy.Enums.ThemeColor color) => $""{(int)color} - {color}"";

    IEnumerable<Blazy.Enums.ThemeColor> Options = Enum.GetValues<Blazy.Enums.ThemeColor>();
}";
        }
        <BlazyCodeBox Code="@_codeSelect" />
    
        <h5>Example - With default rendering</h5>
        <BlazySelect 
            TItem="Blazy.Enums.ThemeColor"
            Label="Theme"
            Options="@Options"
            @bind-SelectedOption="@selection"
            Display="@GetThemeColorText" />
    </div>
    <div>

        <h5>Code - With OptionTemplate</h5>

        @{
            string _codeSelectRenderFragment = @"<BlazySelect 
    TItem=""Blazy.Enums.ThemeColor""
    Label=""Theme""
    Options=""@Options""
    @bind-SelectedOption=""@selection""
    Display=""@GetDisplayText"">
    <OptionTemplate>
        <div class=""option-template p-1 @GetOptionColors(context)"">
            @GetDisplayText(context)
        </div>
    </OptionTemplate>
</BlazySelect>

@code {
    Blazy.Enums.ThemeColor selection;

    string GetDisplayText(Blazy.Enums.ThemeColor color) 
        => $""{(int)color} - {color}"";

    IEnumerable<Blazy.Enums.ThemeColor> Options = Enum.GetValues<Blazy.Enums.ThemeColor>();

    string GetOptionColors(Blazy.Enums.ThemeColor color) => color switch {
        Blazy.Enums.ThemeColor.Transparent => $""bg-{color.ToString().ToLower()} text-dark"",
        Blazy.Enums.ThemeColor.Light => $""bg-{color.ToString().ToLower()} text-dark"",
        _ => $""bg-{color.ToString().ToLower()} text-white"",
    };
}";
        }
        <BlazyCodeBox Code="@_codeSelectRenderFragment" />
    
        <h5>Example - With OptionTemplate</h5>
        <BlazySelect 
            TItem="Blazy.Enums.ThemeColor"
            Label="Theme"
            Options="@Options"
            @bind-SelectedOption="@selectionrf"
            Display="@GetThemeColorText">
            <OptionTemplate>
                <div class="option-template p-1 @GetOptionColors(context)">@GetThemeColorText(context)</div>
            </OptionTemplate>
        </BlazySelect>
    </div>
</div>

<div class="space"></div>

<h4>BlazyInputText</h4>
<div class="d-grid d-grid-3-col">
    <div>
        <h5>Code - Basic</h5>

        @{
            string _codeBasicInputText = @"<BlazyInputText 
    Label=""Text Label"" 
    Placeholder=""Placeholder text"" 
    @bind-Value=""@Value"" />

@code {
    string Value = string.Empty;
}";
        }
        <BlazyCodeBox Code="@_codeBasicInputText" />
    
        <h5>Example - Basic</h5>
        <BlazyInputText 
            Label="Text Label" 
            Placeholder="Placeholder text" 
            @bind-Value="@basicText" />
    </div>
    <div>

        <h5>Code - Readonly</h5>

        @{
            string _codeReadOnlyInputText = @"<BlazyInputText 
    Label=""Text Label"" 
    Placeholder=""Placeholder text"" 
    Readonly=""true""
    Value=""@Value"" />

@code {
    string Value = ""This is a readonly input"";
}";
        }
        <BlazyCodeBox Code="@_codeReadOnlyInputText" />
    
        <h5>Example - Readonly</h5>
        <BlazyInputText 
            Label="Text Label" 
            Placeholder="Placeholder text" 
            Readonly="true" 
            Value="@readonlyText" />
    </div>
    <div>

        <h5>Code - Masked</h5>

        @{
            string _codeMaskedInputText = @"<BlazyInputText 
    Label=""Text Label"" 
    Placeholder=""Placeholder text"" 
    Masked=""true""
    @bind-Value=""@Value"" />

@code {
    string Value = string.Empty;
}";
        }
        <BlazyCodeBox Code="@_codeMaskedInputText" />
    
        <h5>Example - Masked (@maskedText)</h5>
        <BlazyInputText 
            Label="Text Label" 
            Placeholder="Placeholder text" 
            Masked="true" 
            @bind-Value="@maskedText" />
    </div>
</div>


@code {
    Blazy.Enums.ThemeColor selection;
    Blazy.Enums.ThemeColor selectionrf;
    string basicText = string.Empty;
    string readonlyText = "This is a readonly input";
    string maskedText = string.Empty;

    string GetThemeColorText(Blazy.Enums.ThemeColor color) => $"{(int)color} - {color}";

    IEnumerable<Blazy.Enums.ThemeColor> Options = Enum.GetValues<Blazy.Enums.ThemeColor>();

    string GetOptionColors(Blazy.Enums.ThemeColor color) => color switch {
        Blazy.Enums.ThemeColor.Transparent => $"bg-{color.ToString().ToLower()} text-dark",
        Blazy.Enums.ThemeColor.Light => $"bg-{color.ToString().ToLower()} text-dark",
        _ => $"bg-{color.ToString().ToLower()} text-white",
    };
}
