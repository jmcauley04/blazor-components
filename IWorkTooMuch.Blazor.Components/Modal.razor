@if (IsOpen)
{
    <div @onclick="Cancel" class="modal show" tabindex="-1" aria-modal="true" role="dialog" style="display: block; background-color: rgba(0,0,0,.4);">
        <div @onclick:stopPropagation="true" class="modal-dialog modal-dialog-scrollable @maxWidthClass">
            <div class="modal-content">
                @if(Header != null)
                {
                    <div class="modal-header">
                        @Header            
                        <button type="button" class="btn-close" @onclick="Cancel" aria-label="Close"></button>          
                    </div>   
                }
            <div class="modal-body">
                @if(Body != null)
                {
                    @Body                       
                }
            </div>
            <div class="modal-footer">
                @if(Footer == null)
                {
                    <button disabled="@working" type="button" class="btn btn-secondary" @onclick="Cancel">Close</button>
                    @if(OnSave.HasDelegate)
                    {
                        <button disabled="@(working || !CanSave)" type="button" class="btn btn-primary" @onclick="Save">Save changes</button>                            
                    }
                }
                else
                {
                    @Footer
                }
            </div>
        </div>
      </div>
    </div> 
}

@code {
    bool working;

    public enum MaxWidthCategory {
        Small = 300, 
        Default = 500, 
        Large = 800,
        ExtraLarge = 1140
    }

    [Parameter]
    public MaxWidthCategory MaxWidth { get; set; } = MaxWidthCategory.Default;

    string maxWidthClass => MaxWidth switch
    {
        MaxWidthCategory.Small => "modal-sm",
        MaxWidthCategory.Default => "",
        MaxWidthCategory.Large => "modal-lg",
        MaxWidthCategory.ExtraLarge => "modal-xl",
        _ => ""
    };

    [Parameter]
    public EventCallback OnSave { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public RenderFragment Header { get; set; }

    [Parameter]
    public RenderFragment Body { get; set; }

    [Parameter]
    public RenderFragment Footer { get; set; }

    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public bool CanSave { get; set; } = true;


    void Open()
    {
        IsOpenChanged.InvokeAsync(true);
    }

    async Task Cancel()
    {
        working = true;
        await OnCancel.InvokeAsync();
        working = false;
        await IsOpenChanged.InvokeAsync(false);
    }

    async Task Save()
    {        
        working = true;
        await OnSave.InvokeAsync();
        working = false;
        await IsOpenChanged.InvokeAsync(false);
    }
}


