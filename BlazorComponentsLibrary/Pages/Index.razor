@page "/"
@using IWorkTooMuch.Blazor.Components.Interfaces
@using Model

<div class="wrapper">

        <h3>
            BlazyCodeBox
        </h3>
    <BlazyCodeBox Code="@codeTxt" />
</div>
@code{

    string codeTxt = @"[Parameter]
public string Code { get; set; } = string.Empty;

var root = CSharpSyntaxTree.ParseText(Code).GetRoot();
var nodes = root.DescendantNodesAndTokens().ToList();

foreach(var node in nodes)
{
    var span = node.Span;
    int origLength = span.Length;
    var styledText = string.Empty;

    if(node.Kind().ToString().Contains(""Keyword""))
        styledText = Styled(text.Substring(span.Start + offset, span.End - span.Start), Colors[SyntaxColor.Blue]);
    else
        switch (node.Kind())
        {   
            case SyntaxKind.IdentifierToken:
                if (node.Parent?.Kind() == SyntaxKind.LocalFunctionStatement)
                    styledText = Styled(text.Substring(span.Start + offset, span.End - span.Start), Colors[SyntaxColor.Yellow]);
                    else continue;
                break;
                case SyntaxKind.IdentifierName:                        
                    styledText = Styled(text.Substring(span.Start + offset, span.End - span.Start), Colors[SyntaxColor.Green]);
                    break;
            default:
                continue;
        }

    text = text.Substring(0, span.Start + offset) + styledText + text.Substring(span.End + offset);
    offset += styledText.Length - origLength;
}";


    [CascadingParameter]
    public Notifier Notifier { get; set; }

    bool modalIsOpen { get; set; } = true;

    void OnSave()
    {
        
    }

    public string input { get; set; }

    private void Notify(int num)
    {
        switch (num)
        {
            case 1:
                Notifier.ProcessNotification("Default", input);
                break;
            case 2:
                Notifier.ProcessSuccess("Succcess", input);
                break;
            case 3:
                Notifier.ProcessWarning("Warning", input);
                break;
            case 4:
                Notifier.ProcessError(new Exception(input));
                break;
        }
    }

}