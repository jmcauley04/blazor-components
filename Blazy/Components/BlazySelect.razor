@typeparam TItem
@typeparam TId

<select @bind="SelectedOptionId">
    <option value=""></option>
    @if(Options != null && OptionTemplate != null)
    {
        @foreach(var option in Options)
        {
            <option selected="@(GetId(option)!.Equals(GetId(SelectedOption)))">                
                @OptionTemplate(option)
            </option>
        }
    }
</select>

@code {
    [Parameter, EditorRequired]
    public IEnumerable<TItem>? Options { get; set; }

    [Parameter, EditorRequired]
    public RenderFragment<TItem>? OptionTemplate { get; set; }

    [Parameter, EditorRequired]
    public Func<TItem?, TId?> GetId { get; set; } = null!;

    [Parameter]
    public TItem? SelectedOption { get; set; }

    [Parameter]
    public EventCallback<TItem?> SelectedOptionChanged{ get; set; }

    TId? selectedOptionId = default(TId?);
    TId? SelectedOptionId { get => selectedOptionId; set { selectedOptionId = value; SelectOptionIdChanged(value); } }

    void SelectOptionIdChanged(TId? value)
    {
        TItem? selectedItem = Options!.SingleOrDefault(x => GetId(x)!.Equals(value));
        SelectedOptionChanged.InvokeAsync(selectedItem);
    }
}
