@typeparam TItem

<Blazy.Components.Internal.BlazyStyleProvider>

    <div class="z-select" @onclick="ToggleOpen">    
        <BlazyInputText Label="@Label" Value="@SelectedOptionText" Readonly="true" />
        <ul hidden="@(!IsOpen)" class="z-shadow" @onclick:stopPropagation>        
            @if(Options != null)
            {
                @foreach(var option in Options)
                {
                    <li @onclick="async () => await Select(option)" class="@(option!.Equals(SelectedOption) ? "active" : "") @(OptionTemplate == null ? "z-li-padding z-hover" : "")">  
                        @if(OptionTemplate == null)
                        {
                            @Display(option)                            
                        }
                        else
                        {
                            @OptionTemplate(option)                            
                        }
                    </li>
                }
            }
        </ul>
    </div>

</Blazy.Components.Internal.BlazyStyleProvider>

@code {

    [Parameter, EditorRequired]
    public IEnumerable<TItem>? Options { get; set; }

    [Parameter, EditorRequired]
    public Func<TItem?, string> Display { get; set; } = null!;

    [Parameter]
    public RenderFragment<TItem>? OptionTemplate { get; set; }

    [Parameter]
    public TItem? SelectedOption { get; set; }

    [Parameter]
    public EventCallback<TItem?> SelectedOptionChanged { get; set; }

    [Parameter]
    public string Label { get; set; } = string.Empty;

    string SelectedOptionText => Display == null ? string.Empty : Display(SelectedOption);
    bool IsOpen;

    async Task Select(TItem? option)
    {
        SelectedOption = option;
        await SelectedOptionChanged.InvokeAsync(option);
        IsOpen = false;
    }

    void ToggleOpen()
    {
        IsOpen = !IsOpen;
    }
}
