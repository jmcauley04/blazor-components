@using System.Timers

@if (CascadeValue)
{
    <CascadingValue Value="this">

        @ChildContent

    </CascadingValue>    
}

<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1000">
    @if(firstMessage != null)
    {
        <div class="toast show" role="alert">
            @if(Messages.Count > 1)
            {
                <div class="msg-qty-badge bg-danger">
                    <span>+@(Messages.Count - 1)</span>
                </div>                    
            }
            <div class="toast-header">
                <div class="blazy-dot bg-@firstMessage.ThemeColor.ToString().ToLower()"></div>
                <strong class="me-auto">@firstMessage.Title</strong>
                <small>@firstMessage.Subtitle</small>
                <button type="button" class="btn-close" @onclick="async () => CloseMessage(firstMessage)"></button>
            </div>
            <div class="toast-body">
                @firstMessage.Text
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool CascadeValue { get; set; } = false;

    private List<Message> Messages = new();

    private Message? firstMessage => Messages.FirstOrDefault();

    void StartMessage()
    {        
        if (firstMessage != null)
        {
            firstMessage.StartTimer();
            if (string.IsNullOrEmpty(firstMessage.Subtitle))
            {
                var secondsAgo = (int)(DateTime.Now - firstMessage.CreatedAt).TotalSeconds;

                firstMessage.Subtitle = secondsAgo > 60 ? firstMessage.CreatedAt.ToShortTimeString() : 
                                        secondsAgo > 1 ? $"{secondsAgo} seconds ago" : 
                                        "just now";
            }
        }
        InvokeAsync(StateHasChanged);
    }

    public void AddMessage(string text, 
        string title,
        string subtitle = "",                        
        int delayMilliseconds = 3000,
        ThemeColor themeColor = ThemeColor.Primary)
    {
        var message = new Message()
            {
                Text = text,
                Title = title,
                Subtitle = subtitle,
                ThemeColor = themeColor,    
                DelayMilliseconds = delayMilliseconds
            };

        message.Elapsed += TimedRemove;

        if (delayMilliseconds > 0)
            message.InitializeTimer();

        Messages.Add(message);

        if (firstMessage != message)
            InvokeAsync(StateHasChanged);
        else
            StartMessage();      
    }

    void CloseMessage(Message message)
    {
        message.Elapsed -= TimedRemove;
        Messages.Remove(message);
        message.Dispose();

        if (firstMessage is null)
            InvokeAsync(StateHasChanged);
        else
            StartMessage();
    }

    private void TimedRemove(object? sender, ElapsedEventArgs e)
    {
        if (sender == null)
            return;

        CloseMessage((Message)sender);
    }

    class Message : IDisposable
    {
        public string Title = string.Empty;
        public string Subtitle = string.Empty;
        public string Text = string.Empty;
        public int DelayMilliseconds;
        public DateTime CreatedAt = DateTime.Now;
        public ThemeColor ThemeColor = ThemeColor.Primary;

        public event ElapsedEventHandler? Elapsed;
        private System.Timers.Timer? timer;

        private void TimerOver(object? sender, ElapsedEventArgs e)
        {
            Elapsed?.Invoke(sender, e);
        }

        public void InitializeTimer()
        {
            timer = new Timer(DelayMilliseconds)
                {
                    AutoReset = false,
                    Enabled = true,
                };

            StopTimer();
            timer.Elapsed += (s, e) => Elapsed?.Invoke(this, e);
        }

        public void StopTimer()
        {
            timer?.Stop();
        }

        public void StartTimer()
        {
            timer?.Start();
        }

        public void Dispose()
        {
            timer?.Dispose();
        }
    }
}
