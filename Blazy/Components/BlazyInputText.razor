<div class="@(isValidated ? "valid-input" : "invalid-input")" @onclick=OnClick>    
    <label class="@focusClass @smallClass @readonlyClass" for="@guid">@Label</label>
    <input 
        id="@guid"
        value="@Value" 
        type="@(Masked ? "password" : "text")"
        @oninput="OnChange" 
        @onfocus="SetFocus"
        @onfocusout="UnsetFocus"
        placeholder="@placeholder"
        readonly="@Readonly" />
</div>

@code {
    string placeholder = string.Empty;
    string labelClass = string.Empty;
    string focusClass = string.Empty;
    string smallClass => string.IsNullOrEmpty(Value) && string.IsNullOrEmpty(focusClass) ? "" : "small";
    string readonlyClass => Readonly ? "readonly" : "";
    bool isValidated = false;
    Guid guid = Guid.NewGuid();

    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter] 
    public string Placeholder { get; set; } = string.Empty;

    [Parameter]
    public string Value { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public Func<bool>? IsValid { get; set; }

    [Parameter]
    public bool Readonly { get; set; }

    [Parameter]
    public bool Masked { get; set; }

    [Parameter]
    public EventCallback OnClick { get; set; }

    private void OnChange(ChangeEventArgs args)
    {
        ValueChanged.InvokeAsync(args.Value?.ToString());
        if (Value != args.Value?.ToString())
            Value = args.Value?.ToString() ?? string.Empty;

        isValidated = (IsValid != null && IsValid.Invoke()) || (IsValid == null && !string.IsNullOrEmpty(Value));
    }

    private void SetFocus()
    {
        if (!Readonly)
        {
            placeholder = Placeholder;
            focusClass = "focused";            
        }
    }

    private void UnsetFocus()
    {
        placeholder = string.Empty;
        focusClass = string.Empty;
    }
}
