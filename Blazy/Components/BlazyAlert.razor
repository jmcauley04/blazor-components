@if (!IsDismissed)
{
    <div class="alert alert-@Type.ToString().ToLower() @cssClass">
        @if(ChildContent != null)
        {
            <div>
                @ChildContent   
            </div>
        }
        @if (IsDismissible)
        {
            <a @onclick="Close" class="close">&times;</a>        
        }
    </div>    
}

@code {
    public enum AlertType
    {
        Success,
        Info,
        Warning,
        Danger
    }

    [Parameter]
    public AlertType Type { get; set; }

    [Parameter]
    public bool IsDismissible { get; set; }

    [Parameter]
    public int TimeoutDelay { get; set; } = 0;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    string cssClass = string.Empty;
    bool IsDismissed = false;

    protected override async Task OnInitializedAsync()
    {
        if(TimeoutDelay > 0)
        {
            await Task.Delay(TimeoutDelay * 1000);
            cssClass = "fade";
            StateHasChanged();
            await Task.Delay(300);
            IsDismissed = true;
        }
    }

    async Task Close()
    {
        cssClass = "fade";
        await Task.Delay(300);
        IsDismissed = true;
    }
}
