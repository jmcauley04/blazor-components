<div class="stepper">
    <CascadingValue Value="this">
        @ChildContent
        <ul>
                @for(int i = 0; i < Steps.Count; i++)
                {
                    var index = i;
                    var step = Steps[i];
                    <li>
                        <BlazyButton Disabled="index > 0 && !previousSteps(index).All(x => x.IsValid())" OnClick="() => MoveToStep(index)">
                            <div class="d-flex">
                                @if(index == selectedIndex)
                                {
                                    <div class="pill pill-icon">
                                        <Blazy.Fragments.BlazyIcon Icon="Fragments.BlazyIcon.IconType.oi_pencil" />
                                    </div>
                                }
                                else
                                {
                                    <div class="pill">
                                        @(index + 1)
                                    </div>
                                }
                                @step.Title
                            </div>
                        </BlazyButton>
                        <div class="content-holder">
                            <BlazyHeightTransition Collapsed="@(index != selectedIndex)">
                                <div class="content">
                                    @step.ChildContent
                                    <div class="btn-bar">
                                        @if(index > 0)
                                        {                                
                                            <BlazyButton OnClick="() => MoveToStep(index - 1)"><strong>Back</strong></BlazyButton>
                                        }
                                        @if(index < Steps.Count - 1)
                                        {
                                            <BlazyButton OnClick="() => MoveToStep(index + 1)" Disabled="!step.IsValid()"><strong>Next</strong></BlazyButton>
                                        }
                                        else
                                        {
                                            <BlazyButton OnClick="() => MoveToStep(0)"><strong>Reset</strong></BlazyButton>                                
                                        }
                                    </div>
                                </div>
                            </BlazyHeightTransition>
                        </div>       
                    </li>         
                }
        </ul>
    </CascadingValue>
</div>

@code {
    [Parameter]
    public bool LinearMode { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private int selectedIndex = 0;

    List<BlazyStepperStep> Steps { get; set; } = new();

    IEnumerable<BlazyStepperStep> previousSteps(int index) => Steps.Where(x => Steps.IndexOf(x) < index);

    public void AddStep(BlazyStepperStep step)
    {
        Steps.Add(step);
        StateHasChanged();
    }

    public void RemoveStep(BlazyStepperStep step)
    {
        Steps.Remove(step);
        StateHasChanged();
    }

    void MoveToStep(int index)
    {
        selectedIndex = index;
    }
}
