@inherits BlazyBase

<Blazy.Components.Internal.BlazyStyleProvider>

    <button 
        class="@btnClass @CssClass" 
        style="@CssStyle"
        type="@Type"
        disabled="@(isLoading || Disabled)"
        @onclick="onClick" >

        @if (isLoading)
        {
            <span class="spinner">        
                <BlazySpinner ThemeColor="@spinnerTheme" />
            </span>
        }
        else
        {        
            @if(ChildContent != null)
            {
                @ChildContent
            }        
        }        

    </button>

</Blazy.Components.Internal.BlazyStyleProvider>

@code {
    public enum ButtonType
    {
        Button,
        Submit,
        Reset
    }

    [Parameter]
    public ButtonType Type { get; set; } = ButtonType.Button;

    [Parameter]
    public ThemeColor ThemeColor { get; set; } = ThemeColor.Transparent;

    [Parameter]
    public bool Outline { get; set; } = false;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public EventCallback OnClick { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    private string btnClass => $"btn btn-{(Outline ? "outline-" : string.Empty)}{ThemeColor.ToString().ToLower()}";

    private bool isLoading;

    private async Task onClick()
    {
        if (isLoading)
            return;

        try
        {
            isLoading = true;
            await OnClick.InvokeAsync();
        }
        finally
        {
            isLoading = false;
        }
    }

    ThemeColor spinnerTheme => ThemeColor switch
    {
        _ => ThemeColor.Transparent
    };
}
