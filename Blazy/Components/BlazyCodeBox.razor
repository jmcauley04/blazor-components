@using Microsoft.CodeAnalysis
@using Microsoft.CodeAnalysis.CSharp
@using Microsoft.CodeAnalysis.CSharp.Syntax
@using Microsoft.CodeAnalysis.Text

@if(IsToggled){    
    <BlazyButton OnClick="ToggleCode">@(_hidden ? "Show code" : "Hide code")</BlazyButton>
}

@if(!IsToggled || !_hidden)
{
    <div>
        @if(!string.IsNullOrEmpty(Code))
        {        
            <pre>
                @((MarkupString)_code)
            </pre>            
        }
    </div>
}

@code {
    [Parameter]
    public string Code { get; set; } = string.Empty;

    [Parameter]
    public bool IsToggled { get; set; } = false;

    [Parameter]
    public bool ShowLineNumbers { get; set; } = true;

    bool _hidden = true;

    List<TextSpan>? ColoredSpans;
    string _code = string.Empty;

    enum SyntaxColor
    {
        Green,
        Blue,
        LightBlue,
        Yellow,
        Pink,
        Brown
    }

    Dictionary<SyntaxColor, string> Colors = new Dictionary<SyntaxColor, string>
        {
            {SyntaxColor.Green, "color: rgb(58, 192, 176);"},
            {SyntaxColor.Blue, "color: rgb(86, 156, 214);"},
            {SyntaxColor.Yellow, "color: rgb(220, 220, 170);"},
            {SyntaxColor.Pink, "color: rgb(216, 150, 180);"},
            {SyntaxColor.Brown, "color: rgb(212, 151, 120);"},
            {SyntaxColor.LightBlue, "color: rgb(154, 220, 254);"},
        };

    string Styled(string text, string style) => $"<span style='{style}'>{text}</span>";

    enum StyleType {
        LineIndex,
        Keyword,
        Variable,
        Method,
    }

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(_code) && !IsToggled)
            ColorizeText();
        base.OnInitialized();
    }

    void ToggleCode()
    {
        if (string.IsNullOrEmpty(_code) && _hidden)
            ColorizeText();

        _hidden = !_hidden;
    }

    void ColorizeText()
    {
        string code = Code ?? string.Empty;
        code = ColorizeTextKinds(code);
        _code = AddLineNumbers(code);
    }

    string ColorizeTextKinds(string text)
    {
        ColoredSpans = new();
        var root = CSharpSyntaxTree.ParseText(Code).GetRoot();
        var nodes = root.DescendantNodesAndTokens().ToList();
        int offset = 0;

        foreach(var node in nodes)
        {            
            var span = node.Span;
            if (ColoredSpans.Any(x => x.OverlapsWith(span)))
                continue;

            var kind = node.Kind();
            var parentKind = node.Parent!.Kind();

            int origLength = span.Length;
            var styledText = string.Empty;

            if (kind.ToString().Contains("Keyword"))
            {
                if (parentKind.ToString().Contains("Statement") || parentKind.ToString().Contains("Clause") || parentKind.ToString().Contains("Label"))
                    styledText = Styled(text.Substring(span.Start + offset, span.End - span.Start), Colors[SyntaxColor.Pink]);
                else
                    styledText = Styled(text.Substring(span.Start + offset, span.End - span.Start), Colors[SyntaxColor.Blue]);
            }
            else if (kind == SyntaxKind.Attribute)
                styledText = Styled(text.Substring(span.Start + offset, span.End - span.Start), Colors[SyntaxColor.Green]);
            else if (kind == SyntaxKind.StringLiteralExpression)
                styledText = Styled(text.Substring(span.Start + offset, span.End - span.Start), Colors[SyntaxColor.Brown]);
            else
            {                
                SyntaxKind? nextKind = null;
                SyntaxKind? prevKind = null;
                try
                {
                    nextKind = nodes[nodes.IndexOf(node) + 1].Kind();
                }
                catch
                {
                    nextKind = null;
                }
                try
                {
                    prevKind = nodes[nodes.IndexOf(node) - 2].Kind();
                }
                catch
                {
                    prevKind = null;
                }
                switch (node.Kind())
                {
                    case SyntaxKind.IdentifierToken:
                        if (nextKind == SyntaxKind.ArgumentList)
                            styledText = Styled(text.Substring(span.Start + offset, span.End - span.Start), Colors[SyntaxColor.Yellow]);
                        else if (nextKind == SyntaxKind.DotToken)
                            styledText = Styled(text.Substring(span.Start + offset, span.End - span.Start), Colors[SyntaxColor.Green]);
                        else if (prevKind != SyntaxKind.DotToken)
                            styledText = Styled(text.Substring(span.Start + offset, span.End - span.Start), Colors[SyntaxColor.LightBlue]);
                        else
                            continue;
                        break;
                    case SyntaxKind.IdentifierName:
                        if (parentKind.ToString().Contains("Expression"))
                            continue;
                        else                        
                            styledText = Styled(text.Substring(span.Start + offset, span.End - span.Start), Colors[SyntaxColor.Blue]);                        
                        break;
                    default:
                        continue;
                }
            }

            ColoredSpans.Add(span);
            text = text.Substring(0, span.Start + offset) + styledText + text.Substring(span.End + offset);
            offset += styledText.Length - origLength;
        }

        return text;
    }

    string AddLineNumbers(string text)
    {
        var lineIndex = 1;
        string lineIndexNumber(int i) => $"<div style='{Colors[SyntaxColor.Blue]} padding-right: 1em; text-align: right;'>{(ShowLineNumbers ? i.ToString() : string.Empty)}</div><div>";
        var maxRepeat = 200;
        var repeats = 0;
        var result = lineIndexNumber(lineIndex++) + text;

        int nextFind = result.IndexOf(Environment.NewLine, 0);
        while(nextFind > -1 && repeats < maxRepeat)
        {
            string codeSide = result.Substring(Math.Min(nextFind + Environment.NewLine.Length, result.Length));
            result = result.Substring(0, nextFind) + $"</div>{Environment.NewLine}{lineIndexNumber(lineIndex++)}" + codeSide;
            nextFind = result.IndexOf(Environment.NewLine, nextFind + lineIndex.ToString().Length + 6);
            repeats++;
        }
            result += "</div>";

            return result;
    }
}
