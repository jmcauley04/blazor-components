@using Microsoft.CodeAnalysis
@using Microsoft.CodeAnalysis.CSharp
@using Microsoft.CodeAnalysis.CSharp.Syntax
@using Microsoft.CodeAnalysis.Text
@using System.Text
@using Microsoft.JSInterop
@inject IJSRuntime js

@if(IsToggled){    
    <BlazyButton OnClick="ToggleCode">@(_hidden ? "Show code" : "Hide code")</BlazyButton>
}

@if(!IsToggled || !_hidden)
{
    <div class="wrapper">
        <div class="header-bar">
            <span>@Title</span>
            <BlazyButton OnClick="CopyTextToClipboard" ThemeColor="ThemeColor.Transparent">Copy</BlazyButton>
        </div>
        @if(!string.IsNullOrEmpty(Code))
        {        
            <pre>
                @((MarkupString)_code)
            </pre>            
        }
    </div>
}

@code {
    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public string Code { get; set; } = string.Empty;

    [Parameter]
    public bool IsToggled { get; set; } = false;

    [Parameter]
    public bool ShowLineNumbers { get; set; } = true;

    bool _hidden = true;

    List<TextSpan>? ColoredSpans;
    string _code = string.Empty;
    IJSObjectReference? module;

    enum SyntaxColor
    {
        Green,
        Blue,
        LightBlue,
        Yellow,
        Pink,
        Brown,
        Comment,
        White,
    }

    Dictionary<SyntaxColor, string> Colors = new Dictionary<SyntaxColor, string>
        {
            {SyntaxColor.Green, "color: rgb(58, 192, 176);"},
            {SyntaxColor.Blue, "color: rgb(86, 156, 214);"},
            {SyntaxColor.Yellow, "color: rgb(220, 220, 170);"},
            {SyntaxColor.Pink, "color: rgb(216, 150, 180);"},
            {SyntaxColor.Brown, "color: rgb(212, 151, 120);"},
            {SyntaxColor.LightBlue, "color: rgb(154, 220, 254);"},
            {SyntaxColor.Comment, "color: rgb(87, 166, 74);"},
            {SyntaxColor.White, "color: white;"}
        };

    string Styled(string text, string style) => $"<span style='{style}'>{text}</span>";

    enum StyleType {
        LineIndex,
        Keyword,
        Variable,
        Method,
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (module == null)
            module = await js.Import("clipboard.js");
    }

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(_code) && !IsToggled)
            GenerateMarkupString();
        base.OnInitialized();
    }

    private async Task CopyTextToClipboard()
    {
        await module!.InvokeVoidAsync("copyText", Code);
    }

    void ToggleCode()
    {
        if (string.IsNullOrEmpty(_code) && _hidden)
            GenerateMarkupString();

        _hidden = !_hidden;
    }

    void GenerateMarkupString()
    {
        var root = CSharpSyntaxTree.ParseText(Code).GetRoot();
        var sb = new StringBuilder();

        TraverseNodes(root, sb);
        _code = sb.ToString();
    }

    void TraverseNodes(SyntaxNode node, StringBuilder sb)
    {
        int lineNumber = 1;
        AddLineNumber(sb, lineNumber++);

        foreach (var token in node.DescendantTokens())
        {
            if (token.IsMissing)
            {
                continue;
            }
            foreach (var trivia in token.LeadingTrivia)
            {                
                ParseTrivia(trivia, sb, ref lineNumber);
            }
            ParseToken(token, sb);
            foreach (var trivia in token.TrailingTrivia)
            {
                ParseTrivia(trivia, sb, ref lineNumber);
            }
        }

        sb.Append("</span>");
    }

    void ParseTrivia(SyntaxTrivia trivia, StringBuilder sb, ref int lineNumber)
    {        
        var loweredSyntax = trivia.Kind().ToString().ToLower();
        if (loweredSyntax.Contains("comment"))
        {
            sb.Append(Styled(trivia.ToString(), Colors[SyntaxColor.Comment]));
        }
        else if (trivia.Kind() == SyntaxKind.EndOfLineTrivia)
        {
            sb.Append(trivia.ToString());
            sb.Append("</span>");
            AddLineNumber(sb, lineNumber++);
        }
        else
        {
            sb.Append(trivia.ToString());
        }
    }

    void ParseToken(SyntaxToken token, StringBuilder sb)
    {
        var tokenString = token.ToString();
        var result = sb.ToString();
        var previousToken = token.GetPreviousToken().ToString();
        var nextToken = token.GetNextToken().ToString();
        if ((nextToken == ">" && previousToken == "/") 
        || (previousToken == "<" && tokenString != ">")
        || (previousToken == "[" && nextToken == "]"))
        {
            sb.Append(Styled(tokenString, Colors[SyntaxColor.Green]));
        }
        else if (token.Kind().ToString().Contains("Keyword"))
        {
            var parentKind = token.Parent!.Kind();
            if (parentKind.ToString().Contains("Statement") || parentKind.ToString().Contains("Clause") || parentKind.ToString().Contains("Label"))
                sb.Append(Styled(tokenString, Colors[SyntaxColor.Pink]));
            else
                sb.Append(Styled(tokenString, Colors[SyntaxColor.Blue]));
        }
        else if (nextToken == "(")
        {
            sb.Append(Styled(tokenString, Colors[SyntaxColor.Yellow]));
        }
        else if (nextToken == "=")
        {
            sb.Append(Styled(tokenString, Colors[SyntaxColor.LightBlue]));
        }
        else if (previousToken == ".")
        {
            sb.Append(Styled(tokenString, Colors[SyntaxColor.White]));            
        }
        else if (nextToken == "." && token.Text != ")")
        {
            sb.Append(Styled(tokenString, Colors[SyntaxColor.Blue]));                    
        }
        else if (token.Text == "var")
        {            
            sb.Append(Styled(tokenString, Colors[SyntaxColor.Blue])); 
        }
        else
        {
            var style = SyntaxStyle(token.Kind().ToString());
            sb.Append(Styled(tokenString, style));
        }        
    }

    string SyntaxStyle(string syntax)
    {
        var loweredSyntax = syntax.ToLower();
        if (loweredSyntax.Contains("keyword"))
        {
            return Colors[SyntaxColor.Pink];
        }
        else if (loweredSyntax.Contains("string"))
        {
            return Colors[SyntaxColor.Brown];
        }
        else if (loweredSyntax.Contains("comment"))
        {
            return Colors[SyntaxColor.Comment];
        }
        else 
            return Colors[SyntaxColor.White];
    }

    void AddLineNumber(StringBuilder sb, int lineNumber)
    {
        sb.Append($"<span style='{Colors[SyntaxColor.Blue]} padding-right: 1em; text-align: right;'>{(ShowLineNumbers ? lineNumber.ToString() : string.Empty)}</span><span>");
    }
}
