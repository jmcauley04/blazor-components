@using Blazy.Utility
<g transform="translate(0 @YOffSet)"> 

    @if(MouseOverCoordinate is not null)
    {  
        <g transform="translate(@(MouseOverCoordinate.X) @(- MouseOverCoordinate.Y))">
            <text 
                y="-5"
                class="chart-coord"
                transform="scale(@(View.Width / Size.X) @(View.Height / Size.Y))">
                @MouseOverCoordinate</text>
        </g>
        
        @if(MouseDownCoordinate is not null)
        {
            <g transform="translate(@(MouseDownCoordinate.X) @(- MouseDownCoordinate.Y))">
                <text 
                    y="-5"
                    class="chart-coord"
                    transform="scale(@(View.Width / Size.X) @(View.Height / Size.Y))">
                    @MouseDownCoordinate</text>
            </g>
        }
        
        <g stroke-width="3" stroke="#ccc"> 
            @if(MouseDownCoordinate is not null)
            {                    
                
                <line vector-effect="non-scaling-stroke"
                    x1="@(MouseOverCoordinate.X)" 
                    x2="@(MouseOverCoordinate.X)" 
                    y1="@(- MouseDownCoordinate.Y)" 
                    y2="@(- MouseOverCoordinate.Y)"></line>        
                <line vector-effect="non-scaling-stroke"
                    x1="@(MouseDownCoordinate.X)" 
                    x2="@(MouseDownCoordinate.X)" 
                    y1="@(- MouseDownCoordinate.Y)" 
                    y2="@(- MouseOverCoordinate.Y)"></line>   


                
                <line vector-effect="non-scaling-stroke"
                    x1="@(MouseDownCoordinate.X)" 
                    x2="@(MouseOverCoordinate.X)" 
                    y1="@(- MouseOverCoordinate.Y)" 
                    y2="@(- MouseOverCoordinate.Y)"></line>
                <line vector-effect="non-scaling-stroke"
                    x1="@(MouseDownCoordinate.X)" 
                    x2="@(MouseOverCoordinate.X)" 
                    y1="@(- MouseDownCoordinate.Y)" 
                    y2="@(- MouseDownCoordinate.Y)"></line>

            }
            else
            {                  
                    
                
                <line vector-effect="non-scaling-stroke"
                    x1="@(MouseOverCoordinate.X)" 
                    x2="@(MouseOverCoordinate.X)" 
                    y1="@(- View.P1.Y)" 
                    y2="@(- MouseOverCoordinate.Y)"></line>

                  
                <line vector-effect="non-scaling-stroke"
                    x1="@View.P1.X" 
                    x2="@(MouseOverCoordinate.X)" 
                    y1="@(- MouseOverCoordinate.Y)" 
                    y2="@(- MouseOverCoordinate.Y)"></line>

            }           
        </g>
    }
</g>        

@code {
    [CascadingParameter(Name = "Start")]
    public Point Start { get; set; }

    [CascadingParameter(Name = "Size")]
    public Point Size { get; set; }

    [CascadingParameter(Name = "View")]
    public Rectangle View { get; set; }

    [Parameter]
    public Point? MouseOverCoordinate { get; set; }

    [Parameter]
    public Point? MouseDownCoordinate { get; set; }

    public double YOffSet => - Start.Y + (View.P1.Y - Start.Y) + View.P2.Y - (Start.Y + Size.Y);
}
